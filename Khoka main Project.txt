//NOTE FROM BASE JAVA FILE

package Resources;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class base {

	//create envoking single driver to run all the test cases mapped to the method.
	// all will be pointing to single test family. framework is how better maintain data. 
		public WebDriver driver;// make a global variable so different browser can be used easy
		public Properties prop;
		public WebDriver initializeDriver() throws IOException
		{
		//chrome
		//firefox
		//IE
		// we need to pass, if browser envoke chrome, or firefox. write one method. 
		// if we say chrome then chrome block should be executed, same as firefox or IE
		//I will create global enviroment property file so if i pass my browser as chrome,
		//all my 1500 test case will run in chrome. if i change browser value to firefox
		//will do same thing and same in IE. Based upon this we need to write smart script.
		//so we need to create datadriven property file.
		Properties prop = new Properties();
		//now need to give a file path, where exactly data-driven file is located 
												//
		FileInputStream fis = new FileInputStream("C:\\Users\\Khaleed\\eclipse-workspace\\E2EProject\\src\\main\\java\\Resources\\data.properties"); // pass the file name
		// all the resourcs, page object will stay in main folder and test cases will stay in test folder
		//right click academy folder from main->new-other->file->give file name data.properties->finish
		//so once data.properties file created, all the data will run as you give browser name 
		//like browser = chrome. So now base file.java will connect all this three line ou wrote.
		//now i need to pass this path. right click data.properties->resource->copy location path->
		//paste on FileInputStrem("C:\\****    ")
		
		// now prop file is responsible to pull value from data.perperties. but it doesnot have the knoledge of data.properties file.
		//so use this method below. prop.load is a object,can take fis as a argument, need to pass this.
		
		prop.load(fis);
		//prop.getProperty("browser"); // it will pull values from data.properties file
		// put this into variable name String browser = getProperty("browser") 
		String browserName = prop.getProperty("browser"); 
		System.out.println(browserName);
		
		if(browserName.equals("chrome"))
		{
			//write this is to execute in chrome driver
			System.setProperty("webdriver.chrome.driver", "C:\\Users\\chromedriver.exe");
			driver=new ChromeDriver();
			
		}
		else if(browserName.equals("firefox"))
		{
			System.setProperty("webdriver.gecko.driver", "C:\\Users\\Khaleed\\geckodriver.exe");
			WebDriver 
			driver=new FirefoxDriver();	
		}
		else if(browserName.equals("IE"))
		{
			//System.setProperty("webdriver.ie.driver", "C:\\eclipse\\iedriver.exe");
			//WebDriver 
				
		}
		driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);
		return driver;
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
COMPLETE CODE FROM BASE JAVA FILE FROM DULAL

package resources;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;


public class base {

	public static WebDriver driver;
	public Properties prop;
	public FileInputStream fis;
	

	public WebDriver initializeDriver() throws IOException {
		prop = new Properties();
		fis = new FileInputStream("C:\\Users\\Khaleed\\eclipse-workspace\\E2EProject\\src\\main\\java\\resources\\data.properties");

		prop.load(fis);
		//mvn test ---dbrowser=chrome
		/*String browserName=System.getProperty("browser");
		System.out.println(browserName);*/
		
		String browserName = prop.getProperty("browser");

		if (browserName.equals("chrome")) {
			System.setProperty("webdriver.chrome.driver", "C:\\Users\\Khaleed\\chromedriver.exe");
			driver = new ChromeDriver();
		} else if (browserName.equals("firefox")) {
			System.setProperty("webdriver.gecko.driver", "C:\\Users\\Khaleed\\geckodriver.exe");
			driver = new FirefoxDriver();
		} else if (browserName.equals("IE")) {
			System.setProperty("webdriver.ie.driver", "D:\\Works\\MicrosoftWebDriver.exe");
			driver = new InternetExplorerDriver();
		} else if (browserName.equals("edgedriver")) {
			System.setProperty("webdriver.msedge.driver", "D:\\Works\\msedgedriver.exe");
			driver = new EdgeDriver();
		}
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		/*
		 * driver.manage().timeouts().pageLoadTimeout(20, TimeUnit.SECONDS);
		 * driver.manage().window().maximize(); driver.manage().deleteAllCookies();
		 */
		return driver;
	}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------
package Academy;

import static org.testng.Assert.assertEquals;

import java.io.IOException;

import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import pageObject.LandingPage;
import pageObject.Logitp://qaclickacademy.com");nPage;
import resources.base;

public class validateTitle extends base {

	@Test
	public void basePageNavigation() throws IOException
	{
		driver=initializeDriver();
		driver.get(prop.getProperty("url"));	
		//driver.get("ht	
	


	LandingPage l = new LandingPage(driver);
	Assert.assertEquals(l.getTitle().getText(), "FEATURED COURSES123");
	

	
	}

	
	}

-------------------------------------------------------------------------------------------------------------------------------------------------------
package pageObject;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class LandingPage {

	public WebDriver driver; //need to create life for this driver later
	
	//login/css- tagname-attribute-href - value-sign in  a[href*='sign_in']"
	By signin=By.cssSelector("a[href*='sign_in']");
	By title=By.cssSelector(".text-center>h2");
	By NavBar=By.cssSelector(".nav.navbar-nav.navbar-right>li>a");
	

	
	public LandingPage(WebDriver driver) {
		
		this.driver=driver; //create constructor to send argument
	}

	public WebElement getLogin()
	{
		return driver.findElement(signin);
	}
	public WebElement getNavigationBar()
	{
		return driver.findElement(NavBar);
	}
	
	public WebElement getTitle()
	{
		return driver.findElement(title);
	}
	}
		
	
-------------------------------------------------------------------------------------------------------------------------------------------------------
package Academy;

import java.io.IOException;

import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.Test;

import pageObject.LandingPage;
import resources.base;

public class validateNavigationBar extends base {

	
	
	@Test

	public void basePageNavigation() throws IOException {
		driver = initializeDriver();
		// driver.get("http://qaclickacademy.com");
		driver.get(prop.getProperty("url"));

		LandingPage l = new LandingPage(driver);

		Assert.assertTrue(l.getNavigationBar().isDisplayed());
		// Assert.assertFalse(false);
	}
	@AfterTest
	public void teardown() {

		driver.close();
		driver=null;
		
	}
	
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
package pageObject;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public class LoginPage {

	public WebDriver driver; //need to create life for this driver later
	
	//login/css- tagname-attribute-href - value-sign in  a[href*='sign_in']"
	By email=By.cssSelector("[id*='user_email']");
	By password=By.cssSelector("[type*='password']");
	By login=By.cssSelector("[type*='submit']");	
	
	public LoginPage(WebDriver driver) {
		
		this.driver=driver; //create constructor to send argument
	}

	public WebElement getEmail()
	{
		return driver.findElement(email);

	}
	
	public WebElement getPassword()
	{
	
		return driver.findElement(password);
	}
	
	public WebElement getLogin()
	{
		return driver.findElement(login);

	}
		
	
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
package Academy;

import java.io.IOException;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import pageObject.LandingPage;
import pageObject.LoginPage;
import resources.base;

public class HomePage extends base {
	

	@Test(dataProvider ="getData")
	
	public void basePageNavigation(String Username, String Password, String text) throws IOException
	{
		driver=initializeDriver();
		driver.get("http://qaclickacademy.com");
		//driver.get(prop.getProperty("url"));
		// two ways to access other class
		// one is inherritance
		//other is creating object ot that class annd invol=ke method of it
	LandingPage l = new LandingPage(driver);
	l.getLogin().click(); // it is like driver.findelement(By.css()

	LoginPage lp = new LoginPage(driver);
	lp.getEmail().sendKeys(Username);
	lp.getPassword().sendKeys("Password");
	System.out.println(text);
	
	lp.getLogin().click();
	
	}
	
	
	@DataProvider
	public Object[][]getData()
	{
	Object[][] data = new Object[2][3];
	 //0th row
	data[0][0]= "nonrestricteduser@qw.com";
	data[0][1]= "123456";
	data[0][2]= "restricted User";
	 //1st row		
	data[1][0]= "restricteduser@qw.com";
	data[1][1]= "45678";
	data[1][2]= "non restricted User";
			
	return data;	
	}
}

-------------------------------------------------------------------------------------------------------------------------------------------------------
DATA.PROPERTIES File

browser=firefox
url=http://qaclickacademy.com

-------------------------------------------------------------------------------------------------------------------------------------------------------
TESTNG XML FILE

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "https://testng.org/testng-1.0.dtd">
<suite name="Suite">
  <test thread-count="5" name="Test">
    <classes>
      <class name="Academy.AppTest"/>
      <class name="Academy.validateNavigationBar"/>
      <class name="Academy.HomePage"/>
      <class name="Academy.validateTitle"/>
    </classes>
  </test> <!-- Test -->
</suite> <!-- Suite -->
-------------------------------------------------------------------------------------------------------------------------------------------------------
